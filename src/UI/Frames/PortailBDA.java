/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Frames;

import NOYAU.patient.Patient;
import NOYAU.patient.Venue;
import NOYAU.structure.Intervenant;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author leandro/Julia
 */
public class PortailBDA extends javax.swing.JFrame {

    private final DefaultListModel listPatients = new DefaultListModel();
    private final Object currentWindow = this;
//    private final DAOPatient daoPatient;
    private Patient patient;
    private final Intervenant intervenantCourant;
    private final String persoString;
//    private final DAOSejour sejourDAO;
//    private Sejour sejour;
    private final PortailBDA admin;

    /**
     * Constructeur de notre interface administrative.
     *
     * @param p
     */
    public PortailBDA(Intervenant p) {
        admin = this;
//        sejourDAO = new DAOSejour();

        //permet de récuperer le nom et premiere lettre du prénom du intervenantCourant connecté.
        intervenantCourant = p;
        persoString = intervenantCourant.getPrenom().substring(0, 1).toUpperCase() + "-" + intervenantCourant.getNom().toUpperCase();

        //affichage plein écran sans les décorations du frame.
        this.setExtendedState(PortailBDA.MAXIMIZED_BOTH);
        this.setUndecorated(true);

//        daoPatient = new DAOPatient();
        initComponents();
        this.texteSaisie.grabFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        deconectBut = new javax.swing.JButton();
        IDpersonnel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        JPanelPatient = new javax.swing.JPanel();
        listePatient = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        infoPatient = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        sejourPrecBut = new javax.swing.JButton();
        addSejour = new javax.swing.JButton();
        jButtonCloturerDossier = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        infoPatientText = new javax.swing.JTextArea();
        texteSaisie = new javax.swing.JFormattedTextField();
        rechercheBut = new javax.swing.JButton();
        addPatient = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MEDI_Princeton");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(156, 193, 234));

        deconectBut.setBackground(new java.awt.Color(102, 102, 102));
        deconectBut.setForeground(new java.awt.Color(255, 255, 255));
        deconectBut.setText("Déconnexion");
        deconectBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconectButActionPerformed(evt);
            }
        });

        IDpersonnel.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        IDpersonnel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IDpersonnel.setText(persoString);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nom du patient :");

        jSplitPane1.setBackground(new java.awt.Color(13, 47, 84));
        jSplitPane1.setDividerLocation(270);
        jSplitPane1.setDividerSize(7);

        JPanelPatient.setBackground(new java.awt.Color(102, 102, 102));
        JPanelPatient.setLayout(new java.awt.BorderLayout());

        jList1.setBackground(new java.awt.Color(204, 204, 255));
        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "      NOM - Prénom", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N
        jList1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jList1.setForeground(new java.awt.Color(255, 255, 255));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setModel(listPatients);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        listePatient.setViewportView(jList1);
        jList1.setSelectionMode(0);

        JPanelPatient.add(listePatient, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(JPanelPatient);

        infoPatient.setBackground(new java.awt.Color(156, 193, 234));
        infoPatient.setLayout(new java.awt.BorderLayout());

        jPanel8.setBackground(new java.awt.Color(156, 193, 234));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        infoPatient.add(jPanel8, java.awt.BorderLayout.LINE_END);

        jPanel6.setBackground(new java.awt.Color(156, 193, 234));

        sejourPrecBut.setBackground(new java.awt.Color(153, 153, 153));
        sejourPrecBut.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sejourPrecBut.setForeground(new java.awt.Color(0, 0, 0));
        sejourPrecBut.setText("SEJOURS PRECEDENTS");
        sejourPrecBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sejourPrecButActionPerformed(evt);
            }
        });

        addSejour.setBackground(new java.awt.Color(153, 153, 153));
        addSejour.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addSejour.setForeground(new java.awt.Color(0, 0, 0));
        addSejour.setText("CREER SEJOUR");
        addSejour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSejourActionPerformed(evt);
            }
        });

        jButtonCloturerDossier.setBackground(new java.awt.Color(153, 153, 153));
        jButtonCloturerDossier.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonCloturerDossier.setForeground(new java.awt.Color(0, 0, 0));
        jButtonCloturerDossier.setText("CLOTURER SEJOUR");
        jButtonCloturerDossier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloturerDossierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sejourPrecBut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(addSejour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCloturerDossier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(106, 106, 106))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sejourPrecBut)
                    .addComponent(addSejour, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonCloturerDossier)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        infoPatient.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jPanel7.setBackground(new java.awt.Color(156, 193, 234));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(156, 193, 234));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBackground(new java.awt.Color(156, 193, 234));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SEJOURS OUVERTS :", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jScrollPane2.setPreferredSize(new java.awt.Dimension(478, 460));

        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jTable1);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel4, java.awt.BorderLayout.CENTER);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INFORMATIONS PATIENT :", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jScrollPane3.setMinimumSize(new java.awt.Dimension(37, 60));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(275, 190));

        infoPatientText.setEditable(false);
        infoPatientText.setBackground(new java.awt.Color(156, 193, 234));
        infoPatientText.setColumns(20);
        infoPatientText.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        infoPatientText.setRows(6);
        jScrollPane3.setViewportView(infoPatientText);

        jPanel7.add(jScrollPane3, java.awt.BorderLayout.PAGE_START);

        infoPatient.add(jPanel7, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(infoPatient);

        texteSaisie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                texteSaisieKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                texteSaisieKeyReleased(evt);
            }
        });

        rechercheBut.setBackground(new java.awt.Color(153, 153, 153));
        rechercheBut.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rechercheBut.setForeground(new java.awt.Color(0, 0, 0));
        rechercheBut.setText("Rechercher");
        rechercheBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheButActionPerformed(evt);
            }
        });

        addPatient.setBackground(new java.awt.Color(153, 153, 153));
        addPatient.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addPatient.setForeground(new java.awt.Color(0, 0, 0));
        addPatient.setText("CREER PATIENT");
        addPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(IDpersonnel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deconectBut))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(texteSaisie, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rechercheBut)
                                .addGap(18, 18, 18)
                                .addComponent(addPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDpersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deconectBut))
                .addGap(52, 52, 52)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(texteSaisie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rechercheBut)
                    .addComponent(addPatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Helix_SIH");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cette méthode est appelée lorsqu'on clique sur le boutton de
     * déconnection. il permet de confirmer que l'utilisateur va quitter sa
     * session dans l'application.
     *
     * @param evt
     */
    private void deconectButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconectButActionPerformed
        int i = JOptionPane.showConfirmDialog(this, "Voulez-vous quitter la session ? ", "ATTENTION", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            new FenetreConnexion().setVisible(true);
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_deconectButActionPerformed

    /**
     * méthode qui permet de changer les informations affichées dans
 infoPatientSText et dans le tableau des séjours ouverts en fonction du
 patient sélectionné dans la liste qui s'affiche.
     *
     * @param evt
     */
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

        if (!evt.getValueIsAdjusting()) {

            if (jList1.getSelectedIndex() == -1) {
                infoPatientText.setVisible(false);
                jTable1.setVisible(false);
                patient = null;

            } else {
                patient = (Patient) jList1.getSelectedValue();

                //permet d'afficher les informations du patients dans le jTextArea nommé InfoPatientText.
                String texte;
                if(patient.getIPP() != null){
                    texte = "IPP : " + patient.getIPP() +  " Nom d'usage :   " + patient.getNomUsuel()+ "     Nom de naissance :   "
                            + patient.getNomNaissance() + "\n Prénom :    " + patient.getPrenomPrincipal()
                            + "\n Date de naissance :    " + patient.getDateNaissance() + "    Sexe : " + patient.getSexe().toString();
                } else {
                    texte = "Sans IPP --  Nom d'usage :   " + patient.getNomUsuel()+ "     Nom de naissance :   "
                            + patient.getNomNaissance() + "\n Prénom :    " + patient.getPrenomPrincipal()
                            + "\n Date de naissance :    " + patient.getDateNaissance() + "    Sexe : " + patient.getSexe().toString();
                }
                infoPatientText.setText(texte);
                infoPatientText.setVisible(true);

                //si les séjours ouverts, c'est à dire non réglés à l'accueil, existent alors ils sont affichés sur le tableau.
//                patient.setListeSejours(sejourDAO.getLesSejours(patient.getIPP()));
                if (!(patient.getListeSejoursOuverts().isEmpty())) {

                    jTable1.setModel(this.getTableRows());
                    RowSorter<DefaultTableModel> sorter = new TableRowSorter<>(this.getTableRows());
                    jTable1.setRowSorter(sorter);
                    jTable1.setVisible(true);
                } else {

                    String[] headers = new String[]{"IDSéjour :", "Type :", "Service :", "PH Responsable", "Date entrée:", "Date sortie"};
                    String[][] tab = new String[][]{{"aucun séjour existant !"}};
                    DefaultTableModel tableModel = new DefaultTableModel(tab, headers) {

                        boolean[] canEdit = new boolean[]{
                            false, false, false, false, false, false
                        };

                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    };
                    jTable1.setModel(tableModel);
                    RowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
                    jTable1.setRowSorter(sorter);
                    jTable1.setVisible(true);

                }

            }
        }

    }//GEN-LAST:event_jList1ValueChanged

    /**
     * méthode qui permet de rechercher un patient à partir du nom saisie dans
     * la barre de recherche.
     *
     * @param evt
     */
    private void rechercheButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheButActionPerformed
        String nomSaisie = texteSaisie.getText();

        // si on a saisie des caractères dans la barre de recherche alors il va cherche le nom correspondant dans la base.
        if (!(nomSaisie.isEmpty())) {
            // si on a saisie des caractères dans la barre de recherche alors il va chercher le nom correspondant dans la base.
            remplirListePatient(nomSaisie);

            this.texteSaisie.setText(null);
            this.texteSaisie.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez saisir un nom.");
            this.texteSaisie.grabFocus();
        }
        this.texteSaisie.setText(null);
        this.texteSaisie.setVisible(true);

    }//GEN-LAST:event_rechercheButActionPerformed

    /**
     * méthode qui permet d'ouvrir la création d'un séjour en cliquant sur le
     * boutton correspondant
     *
     * @param evt
     */
    private void addSejourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSejourActionPerformed
        if (patient != null) {

//            final NouveauSejour newSejour = new NouveauSejour(patient);
//
//            newSejour.addWindowListener(new WindowAdapter() {
//                @Override
//                public void windowClosed(WindowEvent e) {
//                    ((Component) currentWindow).setEnabled(true);
//                    patient.setListeSejours(sejourDAO.getLesSejours(patient.getIPP()));
//                    jTable1.setModel(admin.getTableRows());
//                    RowSorter<DefaultTableModel> sorter = new TableRowSorter<>(admin.getTableRows());
//                    jTable1.setRowSorter(sorter);
//                    jTable1.setVisible(true);
//                    ((Component) currentWindow).setVisible(true);
//
//                }
//            });
//
//            this.setEnabled(false);
//            newSejour.setVisible(true);
//            newSejour.toFront();

        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un patient !");
        }
    }//GEN-LAST:event_addSejourActionPerformed

    /**
     * méthode qui demande confirmation à l'utilisateur qu'il veut quitter
     * l'application.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int i = JOptionPane.showConfirmDialog(this, "Voulez-vous quitter HeLiX_SIH? \n L'application sera fermée.", "ATTENTION", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * méthode qui écoute l'évenement KeyPressed dans zone de saisie de texte.
     * L'appui sur ENTER enclanche la recherche du patient dans la base de
     * donnée.
     *
     * @param evt
     */
    private void texteSaisieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texteSaisieKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            String nomSaisie = texteSaisie.getText();

            // si on a saisie des caractères dans la barre de recherche alors il va chercher le nom correspondant dans la base.
            if (!(nomSaisie.isEmpty())) {
                remplirListePatient(nomSaisie);

            } else {
                JOptionPane.showMessageDialog(this, "Veuillez saisir un nom.");
            }
            this.texteSaisie.setText(null);
            this.texteSaisie.setVisible(true);
        }
    }//GEN-LAST:event_texteSaisieKeyPressed

    /**
     * permet d'ouvrir une fenêtre de visualisation des séjours précedents à
     * l'hopital pour le patient sélectionné dans la liste lors de l'appui sur
     * le bouton séjours précedents.
     *
     * @param evt
     */
    private void sejourPrecButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sejourPrecButActionPerformed
        if (patient != null) {
//            final SejoursPrecedents sejourPrecedent;
//            sejourPrecedent = new SejoursPrecedents(patient);
//            sejourPrecedent.addWindowListener(new WindowAdapter() {
//                @Override
//                public void windowClosed(WindowEvent e) {
//                    ((Component) currentWindow).setEnabled(true);
//                    ((Component) currentWindow).setVisible(true);
//                }
//            });
//            this.setEnabled(false);
//            sejourPrecedent.setVisible(true);
//            sejourPrecedent.toFront();
        } else {
            JOptionPane.showMessageDialog(this, "Aucun patient sélectionné.");
        }
    }//GEN-LAST:event_sejourPrecButActionPerformed
/**
 * action du boutton qui permet d''ouvrir l'interface d'ajout du patient
 * @param evt 
 */
    private void addPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientActionPerformed
        final NouveauPatient np = new NouveauPatient();
        np.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent e) {
                ((Component) currentWindow).setEnabled(true);
                ((Component) currentWindow).setVisible(true);
            }
        });
        this.setEnabled(false);

        np.setVisible(true);
        np.toFront();
    }//GEN-LAST:event_addPatientActionPerformed

    /**
     * méthode de recherche automatique au relacher de touche
     * @param evt 
     */
    private void texteSaisieKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texteSaisieKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_ENTER) {
            String nomSaisie = texteSaisie.getText();
            if (nomSaisie.length() > 3) {
                if (!(nomSaisie.isEmpty())) {
                    remplirListePatient(nomSaisie);
                }
            } else {
                this.listPatients.removeAllElements();
            }
        }
    }//GEN-LAST:event_texteSaisieKeyReleased

    public void remplirListePatient(String nomSaisie){
        this.listPatients.removeAllElements();
        List<Patient> patientsSaisies = Patient.getPatientByNom(nomSaisie);
        if (!patientsSaisies.isEmpty()) {
            for (Patient p : patientsSaisies) {
                listPatients.addElement(p);
            }
        } 
    }
    
    /**
     * action du boutton cloturer pour cloturer un séjour
     * @param evt 
     */
    private void jButtonCloturerDossierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloturerDossierActionPerformed
//        if (jTable1.getSelectedRow() != -1) {
//            if (!patient.getListeSejoursOuverts().isEmpty()) {
//                sejour = patient.getListeSejoursOuverts().get(jTable1.getSelectedRow());
//                if ((sejour.getDateSortie() != null) && (sejour.getPersonnel() != null)) {
//
//                    int i = JOptionPane.showConfirmDialog(this, "Vous allez clôturer le séjour " + sejour.getNumSejour() + "."
//                            + "Veuillez confirmer que le séjour a été réglé.", "ATTENTION", JOptionPane.YES_NO_OPTION);
//                    if (i == 0) {
//                        sejourDAO.cloturerSejour(sejour.getNumSejour(), patient.getIPP());
//                        patient.setListeSejours(sejourDAO.getLesSejours(patient.getIPP()));
//
//                        if (!(patient.getListeSejoursOuverts().isEmpty())) {
//
//                            jTable1.setModel(this.getTableRows());
//                            RowSorter<DefaultTableModel> sorter = new TableRowSorter<>(this.getTableRows());
//                            jTable1.setRowSorter(sorter);
//                            jTable1.setVisible(true);
//                        } else {
//
//                            String[] headers = new String[]{"IDSéjour :", "Type :", "Service :", "PH Responsable", "Date entrée:", "Date sortie"};
//                            String[][] tab = new String[][]{{"aucun séjour existant !"}};
//
//                            DefaultTableModel tableModel = new DefaultTableModel(tab, headers) {
//
//                                boolean[] canEdit = new boolean[]{
//                                    false, false, false, false, false, false
//                                };
//
//                                @Override
//                                public boolean isCellEditable(int rowIndex, int columnIndex) {
//                                    return canEdit[columnIndex];
//                                }
//                            };
//                            jTable1.setModel(tableModel);
//                            RowSorter<DefaultTableModel> sorter = new TableRowSorter<>(this.getTableRows());
//                            jTable1.setRowSorter(sorter);
//                            jTable1.setVisible(true);
//
//                        }
//
//                    }
//                } else {
//                    JOptionPane.showMessageDialog(this, "Le séjour ne peut pas être clôturé tant que la lettre de sortie est manquante.");
//                }
//            } else {
//                JOptionPane.showMessageDialog(this, "Le patient ne dispose pas de séjours.");
//
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un séjour ouvert.");
//        }
    }//GEN-LAST:event_jButtonCloturerDossierActionPerformed

    /**
     * méthode qui renvoie un tableau non éditable avec triage possible
     * contenant tout les séjours ouverts du patient sélectionné.
     *
     * @return DefaultTableModel
     */
    private DefaultTableModel getTableRows() {
        String[] headers = new String[]{"IDSéjour :", "Type :", "Service :", "PH Responsable", "Date entrée:", "Date sortie"};
        int nbreSejourOuvert = patient.getListeSejoursOuverts().size();
        Object[][] tab = new Object[nbreSejourOuvert][6];
        for (int i = 0; i < nbreSejourOuvert; i++) {
//            Venue sejourSelec = patient.getListeSejoursOuverts().get(i);
//            tab[i][0] = sejourSelec.getNumSejour();
//            tab[i][1] = sejourSelec.getType().toString();
//            tab[i][2] = sejourSelec.getUniteFonctionnelle().getNomUniteFonctionnelle();
//            if (sejourSelec.getPersonnel() != null) {
//                tab[i][3] = "Dr. " + sejourSelec.getPersonnel().getNom();
//            } else {
//                tab[i][3] = "Non attribué";
//            }
//            tab[i][4] = sejourSelec.getDateEntree().toString();
//
//            if (sejourSelec.getDateSortie() != null) {
//                tab[i][5] = sejourSelec.getDateSortie().toString();
//            } else {
//                tab[i][5] = "dans le service";
//            }
        }

        DefaultTableModel tableModel = new DefaultTableModel(tab, headers) {

//            @Override
//            public Class getColumnClass(int column) {
//                if (column >= 0 && column <= getColumnCount()) {
//                    return getValueAt(0, column).getClass();
//                } else {
//                    return Object.class;
//                }
//            }
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        return tableModel;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IDpersonnel;
    private javax.swing.JPanel JPanelPatient;
    private javax.swing.JButton addPatient;
    private javax.swing.JButton addSejour;
    private javax.swing.JButton deconectBut;
    private javax.swing.JPanel infoPatient;
    private javax.swing.JTextArea infoPatientText;
    private javax.swing.JButton jButtonCloturerDossier;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JScrollPane listePatient;
    private javax.swing.JButton rechercheBut;
    private javax.swing.JButton sejourPrecBut;
    private javax.swing.JFormattedTextField texteSaisie;
    // End of variables declaration//GEN-END:variables
}
