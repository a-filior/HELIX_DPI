/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Frames;

import NOYAU.patient.Adresse;
import NOYAU.patient.Patient;
import NOYAU.patient.Venue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;
//import library.interfaces.ClientHL7;


/**
 *
 * @author Julia/Leandro
 */
public class NouveauPatient extends javax.swing.JFrame implements ActionListener {


    private Patient patient;
    private String nomNaissance;
    private String nomCourant;
    private String prenom;
    private Date dateDeNaissance;
    private String IPP;
    private Patient.Sexe sexe;
    private Date dateDeces;
    private boolean estMort;
    private Adresse adresse;
    private String medecinTraitant;
    private List<Venue> listeSejours;
    private String numeroSS;
    private String voie;
    private String ville;
    private String pays;
    private String cdPos;
    private final NouveauPatient newSej;

    /**
     * Creates new form NouveauPatientS
     */
    public NouveauPatient() {
//        patientDAO = new DAOPatient();
        newSej = this;

        //génération d'un IPP unique.
//        IPP = this.generateIPP();
//        while (!patientDAO.dispoIPP(IPP)) {
//            IPP = this.generateIPP();
//        }

        initComponents();

        /**
         * Ajout des listeners
         */
        jButtonAjouter.addActionListener(this);
        jTextFieldNomDeNaissance.addActionListener(this);
        jTextFieldNomDusage.addActionListener(this);
        jTextFieldPrenom.addActionListener(this);
        jTextFieldVoie.addActionListener(this);
        jTextFieldVille.addActionListener(this);
        jTextFieldPays.addActionListener(this);
        jFormattedTextFieldCdPos.addActionListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelNomDeNaissance = new javax.swing.JLabel();
        jTextFieldNomDeNaissance = new javax.swing.JTextField();
        jLabelPrenom = new javax.swing.JLabel();
        jTextFieldPrenom = new javax.swing.JTextField();
        jLabelVoie = new javax.swing.JLabel();
        jTextFieldVoie = new javax.swing.JTextField();
        jLabelVille = new javax.swing.JLabel();
        jTextFieldVille = new javax.swing.JTextField();
        jLabelPays = new javax.swing.JLabel();
        jTextFieldPays = new javax.swing.JTextField();
        jLabelDateDeNaissance = new javax.swing.JLabel();
        jLabelNomDusage = new javax.swing.JLabel();
        jTextFieldNomDusage = new javax.swing.JTextField();
        jLabelSexe = new javax.swing.JLabel();
        jComboBoxSexe = new javax.swing.JComboBox();
        jButtonAjouter = new javax.swing.JButton();
        jFormattedTextFieldCdPos = new javax.swing.JFormattedTextField(createFormatter("## ###"));
        jLabelCP = new javax.swing.JLabel();
        jFormattedTextFieldDateNaissance = new javax.swing.JFormattedTextField(createFormatter("##/##/####"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Nouveau Patient");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));

        jLabelNomDeNaissance.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelNomDeNaissance.setText("NOM DE NAISSANCE* : ");

        jLabelPrenom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelPrenom.setText("PRENOM* :");

        jLabelVoie.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelVoie.setText("Voie");

        jLabelVille.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelVille.setText("VILLE :");

        jLabelPays.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelPays.setText("PAYS :");

        jLabelDateDeNaissance.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelDateDeNaissance.setText("DATE DE NAISSANCE* :");

        jLabelNomDusage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelNomDusage.setText("NOM D'USAGE* :");

        jLabelSexe.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelSexe.setText("SEXE* :");

        jComboBoxSexe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "indeterminé", "Homme", "Femme","Autre" }));

        jButtonAjouter.setBackground(new java.awt.Color(153, 153, 153));
        jButtonAjouter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonAjouter.setText("Créer");

        jLabelCP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCP.setText("CP :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButtonAjouter)
                        .addGap(71, 71, 71))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelVoie)
                            .addComponent(jLabelCP, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jFormattedTextFieldCdPos, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelVille, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldVille, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelPays)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPays, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldVoie, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelDateDeNaissance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelNomDeNaissance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelNomDusage, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldNomDeNaissance)
                                    .addComponent(jTextFieldNomDusage, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48)
                                .addComponent(jLabelPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jFormattedTextFieldDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabelSexe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxSexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldNomDusage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabelNomDusage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomDeNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNomDeNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDateDeNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSexe, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelVoie)
                    .addComponent(jTextFieldVoie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelVille, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldVille, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPays, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldCdPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jButtonAjouter)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * permet de confirmer la fermeture de la fenêtre.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int i = JOptionPane.showConfirmDialog(this, "Voulez-vous quitter la saisie ? Les informations ne seront pas enregistrées", "ATTENTION", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * action du boutton creer qui permet de créer un nouveau séjour.
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {

        /**
         * Traitement pour le bouton Creer
         */
        if ((e.getSource() == jButtonAjouter)) {

//            numeroSS = jFormattedTextFieldNumSS1.getText().replaceAll("\\s", "");
            cdPos = jFormattedTextFieldCdPos.getText().replaceAll("\\s", "");

            /**
             * Verification de la validite des champs du formulaire
             */
            if (jTextFieldNomDusage.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le nom d'usage du patient ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jTextFieldNomDeNaissance.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le nom de naissance du patient ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jTextFieldPrenom.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le pr\u00e9nom du patient ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jFormattedTextFieldCdPos.getValue() == null) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le num\u00e9ro de s\u00e9curit\u00e9 sociale du patient ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (!(this.verifSS(numeroSS))) {
                JOptionPane.showMessageDialog(this, "Numéro de sécurité social incorrecte ! ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jTextFieldVoie.getText() == null) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir la voie ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jTextFieldVille.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le nom de la ville ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jFormattedTextFieldDateNaissance.getText() == null) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir la date de naissance ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else if (jTextFieldPays.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Veuillez saisir le nom du pays ", "Erreur...", JOptionPane.ERROR_MESSAGE);
            } else {
                /**
                 * Recuperation des valeurs saisies par l'utilisateur avec le
                 * bon type
                 */
                setNomCourant(jTextFieldNomDusage.getText().toUpperCase());
                nomNaissance = jTextFieldNomDeNaissance.getText().toUpperCase();
                prenom = jTextFieldPrenom.getText();
                String dateS = jFormattedTextFieldDateNaissance.getText();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                try {
                    dateDeNaissance = sdf.parse(dateS);
                } catch (ParseException ex) {
                    Logger.getLogger(NouveauPatient.class.getName()).log(Level.SEVERE, null, ex);
                }

                voie = jTextFieldVoie.getText();
                ville = jTextFieldVille.getText();
                pays = jTextFieldPays.getText();
//                adresse = new Adresse(voie, ville, pays, cdPos);
                char sexeHL7;
                switch (jComboBoxSexe.getSelectedItem().toString()) {
                    case "Homme":
                        sexe = Patient.Sexe.M;
                        sexeHL7 = 'M';
                        break;
                    case "Femme":
                        sexe = Patient.Sexe.F;
                        sexeHL7 = 'F';
                        break;
                    case "Autre":
                        sexe = Patient.Sexe.O;
                        sexeHL7 = 'O';
                        break;
                    default:
                        sexe = Patient.Sexe.U;
                        sexeHL7 = 'U';
                        break;
                }
                dateDeces = null;
                estMort = Boolean.FALSE;
                medecinTraitant = "";
                listeSejours = new ArrayList<>();

                //Creation du patient 
//                patient = new Patient(nomNaissance, getNomCourant(), prenom, dateDeNaissance, IPP, sexe, dateDeces, estMort, adresse, medecinTraitant, listeSejours, numeroSS);



                //message HL7 envoi du nouveau patient créer.
                char classe = 'I'; //c'est à dire patient hospitalisé.
//                Patient patientHL7 = new Patient(Integer.parseInt(patient.getIPP()), patient.getNomCourant(), classe);
//                patientHL7.setBirth(dateDeNaissance);
//                patientHL7.setFirstName(prenom);
//                patientHL7.setSex(sexeHL7);
//                ClientHL7 client = new ClientHL7();

//                System.out.println(client.connexion("192.168.2.102", 3307));
//
//                client.connexion("192.168.2.102", 3307);
//                client.admit(patientHL7);
//                client.close();

                /**
                 * Fermeture de la fenetre
                 */
                this.dispose();

                JOptionPane.showMessageDialog(this, "Patient créé");
            }
        }

    }

    /**
     * méthode qui vérifie si le numéro de sécurité social siaise en paramètre
     * est valide.
     *
     * @param num
     * @return
     */
    public boolean verifSS(String num) {
        if (!num.equals("") && num.length() == 15) {

            String clefSS = num.substring(13, 15);
            String numSS = num.substring(0, 1) + num.substring(1, 3) + num.substring(3, 5) + num.substring(5, 7) + num.substring(7, 10) + num.substring(10, 13);

            long numSSlong = Long.parseLong(numSS);
            long clefSSlong = Long.parseLong(clefSS);

            return (clefSSlong == (long) (97 - (numSSlong % 97)));
        } else {
            return false;
        }

    }

    /**
     * permet de récuperer le patient qui vient d'être créé dans l'interface
     * administrateur.
     *
     * @return type PatientS
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * permet de générer un IPP avec l'année pour les 2 premiers chiffres suivit
     * d'un nombre alétoire de 7 chiffres.
     *
     * @return String IPP
     */
//    private String generateIPP() {
//        DateFormat formatdate = new SimpleDateFormat("yy");
//        Calendar cal = Calendar.getInstance();
//        String s = formatdate.format(cal.getTime());
//        IPP = s;
//        Random rand = new Random();
//        int nombreAleatoire = rand.nextInt(9999999 - 0 + 1) + 0;
//        IPP += nombreAleatoire;
//        return IPP;
//    }

    /**
     * permet de formater la saisie du texte pour le numero de SS et oblige
     * l'utilisateur a ne saisir que 15chiffres et 6 chiffres pour le code
     * postal.
     */
    private MaskFormatter createFormatter(String s) {
        MaskFormatter formatter = null;
        try {
            formatter = new MaskFormatter(s);
        } catch (java.text.ParseException exc) {
            System.err.println("formatter is bad: " + exc.getMessage());
            System.exit(-1);
        }
        return formatter;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JComboBox jComboBoxSexe;
    private javax.swing.JFormattedTextField jFormattedTextFieldCdPos;
    private javax.swing.JFormattedTextField jFormattedTextFieldDateNaissance;
    private javax.swing.JLabel jLabelCP;
    private javax.swing.JLabel jLabelDateDeNaissance;
    private javax.swing.JLabel jLabelNomDeNaissance;
    private javax.swing.JLabel jLabelNomDusage;
    private javax.swing.JLabel jLabelPays;
    private javax.swing.JLabel jLabelPrenom;
    private javax.swing.JLabel jLabelSexe;
    private javax.swing.JLabel jLabelVille;
    private javax.swing.JLabel jLabelVoie;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldNomDeNaissance;
    private javax.swing.JTextField jTextFieldNomDusage;
    private javax.swing.JTextField jTextFieldPays;
    private javax.swing.JTextField jTextFieldPrenom;
    private javax.swing.JTextField jTextFieldVille;
    private javax.swing.JTextField jTextFieldVoie;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the nomCourant
     */
    public String getNomCourant() {
        return nomCourant;
    }

    /**
     * @param nomCourant the nomCourant to set
     */
    public void setNomCourant(String nomCourant) {
        this.nomCourant = nomCourant;
    }
}
